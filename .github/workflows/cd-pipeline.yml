# Copyright Broadcom, Inc. All Rights Reserved.
# SPDX-License-Identifier: APACHE-2.0

name: '[CI/CD] CD Pipeline'
on: # rebuild any PRs and main branch changes
  workflow_dispatch:
    inputs:
      chart:
        description: 'Chart name to deploy (optional, will auto-detect if not provided)'
        required: false
        type: string
  push:
    branches:
      - main
    paths:
      - 'bitmoa/**'
      - '!**.md'
# Remove all permissions by default.
permissions: {}
jobs:
  get-chart:
    runs-on: ubuntu-latest
    name: 'Get modified charts'
    permissions:
      contents: read
    outputs:
      chart: ${{ steps.get-chart.outputs.chart }}
      result: ${{ steps.get-chart.outputs.result }}
    if: ${{ github.repository_owner == 'bitmoa' }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          path: charts
          fetch-depth: 2 # to be able to obtain files changed in the latest commit
      - id: get-chart
        name: 'Get modified charts'
        run: |
          cd charts

          # Check if this is a manual run with specified chart
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.chart }}" ]]; then
            chart_name="${{ github.event.inputs.chart }}"
            if [[ -d "bitmoa/${chart_name}" ]]; then
              echo "chart=${chart_name}" >> $GITHUB_OUTPUT
              echo "result=ok" >> $GITHUB_OUTPUT
              echo "Manual execution for chart: ${chart_name}"
              exit 0
            else
              echo "error=Specified chart '${chart_name}' does not exist in bitmoa/ directory" >> $GITHUB_OUTPUT
              echo "result=fail" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

          files_changed="$(git show --pretty="" --name-only)"
          # Adding || true to avoid "Process exited with code 1" errors
          charts_dirs_changed="$(echo "$files_changed" | xargs dirname | grep -o "bitmoa/[^/]*" | sort | uniq || true)"
          # Using grep -c as a better alternative to wc -l when dealing with empty strings."
          num_charts_changed="$(echo "$charts_dirs_changed" | grep -c "bitmoa" || true)"
          num_version_bumps="$(echo "$files_changed" | grep  "bitmoa/[^/]*/Chart.yaml" | xargs git show | grep -c "+version" || true)"

          if [[ "$num_charts_changed" -ne "$num_version_bumps" ]]; then
            # Changes done in charts but version not bumped -> ERROR
            charts_changed_str="$(echo ${charts_dirs_changed[@]})"
            echo "error=Detected changes in charts without version bump in Chart.yaml. Charts changed: ${num_charts_changed} ${charts_changed_str}. Version bumps detected: ${num_version_bumps}" >> $GITHUB_OUTPUT
            echo "result=fail" >> $GITHUB_OUTPUT
          elif [[ "$num_charts_changed" -eq "1" ]]; then
            # Changes done in only one chart -> OK
            chart_name=$(echo "$charts_dirs_changed" | sed "s|bitmoa/||g")
            echo "chart=${chart_name}" >> $GITHUB_OUTPUT
            echo "result=ok" >> $GITHUB_OUTPUT
          else
            # Changes done in more than chart -> FAIL
            charts_changed_str="$(echo ${charts_dirs_changed[@]})"
            echo "error=Changes detected in more than one chart directory: ${charts_changed_str}. The publish process will be stopped. Please create different commits for each chart." >> $GITHUB_OUTPUT
            echo "result=fail" >> $GITHUB_OUTPUT
          fi
      - id: show-error
        name: 'Show error'
        if: ${{ steps.get-chart.outputs.result == 'fail' }}
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd
        with:
          script: |
              core.setFailed('${{ steps.get-chart.outputs.error }}')
  pages-deploy:
    runs-on: ubuntu-latest
    needs: get-chart
    if: ${{ needs.get-chart.outputs.result == 'ok' }}
    name: Build and Deploy to GitHub Pages
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        name: Checkout Repository
        with:
          path: charts
      - name: Install helm
        run: |
          HELM_TARBALL="helm-v3.8.1-linux-amd64.tar.gz"
          curl -SsLfO "https://get.helm.sh/${HELM_TARBALL}" && sudo tar xf "$HELM_TARBALL" --strip-components 1 -C /usr/local/bin
      - name: Package Helm Chart
        env:
          CHART: ${{ needs.get-chart.outputs.chart }}
        run: |
          cd charts
          mkdir -p packages

          # Add Helm repository for dependencies
          echo "Adding Helm repositories..."
          helm repo add bitmoa https://charts-dev.bitmoa.net/bitmoa/ || true
          helm repo update

          # Update dependencies
          echo "Updating dependencies for ${CHART}..."
          if [ -f "bitmoa/${CHART}/Chart.yaml" ]; then
            # Check if chart has dependencies
            if grep -q "dependencies:" "bitmoa/${CHART}/Chart.yaml"; then
              helm dependency update bitmoa/${CHART}
            else
              echo "No dependencies found for ${CHART}"
            fi
          fi

          # Package the chart
          helm package bitmoa/${CHART} --destination ./packages/

          # Create or update index.yaml for GitHub Pages
          if [ -f ./packages/index.yaml ]; then
            helm repo index ./packages --url https://charts-dev.bitmoa.net/ --merge ./packages/index.yaml
          else
            helm repo index ./packages --url https://charts-dev.bitmoa.net/
          fi
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          fetch-depth: 0
          path: publish
      - name: Update publish branch with packaged charts
        run: |
          cd publish
          # Ensure we are on 'publish' branch (create if it does not exist)
          if git ls-remote --exit-code --heads origin publish >/dev/null 2>&1; then
            git fetch origin publish
            git checkout publish
          else
            git checkout --orphan publish
            # remove all files from the working tree for a clean orphan branch
            git rm -rf . >/dev/null 2>&1 || true
            rm -rf ./* || true
          fi
          cd ..
          mkdir -p publish/bitmoa

          # Copy new chart packages into the publish branch folder
          cp charts/packages/*.tgz publish/bitmoa/ || true
          cd publish
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # Build or merge the Helm repository publish
          if [ -f bitmoa/index.yaml ]; then
            helm repo index bitmoa --url https://charts-dev.bitmoa.net/bitmoa --merge bitmoa/index.yaml
          else
            helm repo index bitmoa --url https://charts-dev.bitmoa.net/bitmoa
          fi
          # Commit and push changes if any
          if ! git rev-parse --verify HEAD >/dev/null 2>&1; then
            echo "Orphan branch detected, creating initial commit..."
            git add bitmoa
            git commit -m "Initial commit for Helm index [skip ci]"
            git push origin publish
          else
            if ! git diff --quiet; then
              git add bitmoa
              git commit -m "Update Helm index [skip ci]"
              git push origin HEAD:publish
            else
              echo "No changes to commit."
            fi
          fi